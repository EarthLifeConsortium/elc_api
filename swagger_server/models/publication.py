# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Publication(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, pub_id: int=None, pub: str=None, sites: List[int]=None, occs: List[int]=None):
        """
        Publication - a model defined in Swagger

        :param pub_id: The pub_id of this Publication.
        :type pub_id: int
        :param pub: The pub of this Publication.
        :type pub: str
        :param sites: The sites of this Publication.
        :type sites: List[int]
        :param occs: The occs of this Publication.
        :type occs: List[int]
        """
        self.swagger_types = {
            'pub_id': int,
            'pub': str,
            'sites': List[int],
            'occs': List[int]
        }

        self.attribute_map = {
            'pub_id': 'pub_id',
            'pub': 'pub',
            'sites': 'sites',
            'occs': 'occs'
        }

        self._pub_id = pub_id
        self._pub = pub
        self._sites = sites
        self._occs = occs

    @classmethod
    def from_dict(cls, dikt) -> 'Publication':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The publication of this Publication.
        :rtype: Publication
        """
        return deserialize_model(dikt, cls)

    @property
    def pub_id(self) -> int:
        """
        Gets the pub_id of this Publication.
        Unique identifier for a specific publication from the respective databases. Neotoma publications are prepended with ndb and PBDB publications are prepended with pdb

        :return: The pub_id of this Publication.
        :rtype: int
        """
        return self._pub_id

    @pub_id.setter
    def pub_id(self, pub_id: int):
        """
        Sets the pub_id of this Publication.
        Unique identifier for a specific publication from the respective databases. Neotoma publications are prepended with ndb and PBDB publications are prepended with pdb

        :param pub_id: The pub_id of this Publication.
        :type pub_id: int
        """

        self._pub_id = pub_id

    @property
    def pub(self) -> str:
        """
        Gets the pub of this Publication.
        Publication data, either as bibJSON or text string

        :return: The pub of this Publication.
        :rtype: str
        """
        return self._pub

    @pub.setter
    def pub(self, pub: str):
        """
        Sets the pub of this Publication.
        Publication data, either as bibJSON or text string

        :param pub: The pub of this Publication.
        :type pub: str
        """

        self._pub = pub

    @property
    def sites(self) -> List[int]:
        """
        Gets the sites of this Publication.
        If a vector of sites is passed to the query then the sites associated with this publication are listed here as a vector

        :return: The sites of this Publication.
        :rtype: List[int]
        """
        return self._sites

    @sites.setter
    def sites(self, sites: List[int]):
        """
        Sets the sites of this Publication.
        If a vector of sites is passed to the query then the sites associated with this publication are listed here as a vector

        :param sites: The sites of this Publication.
        :type sites: List[int]
        """

        self._sites = sites

    @property
    def occs(self) -> List[int]:
        """
        Gets the occs of this Publication.
        If a vector of occurrences is passed to the query then the occurrences associated with this publication are listed here as a vector

        :return: The occs of this Publication.
        :rtype: List[int]
        """
        return self._occs

    @occs.setter
    def occs(self, occs: List[int]):
        """
        Sets the occs of this Publication.
        If a vector of occurrences is passed to the query then the occurrences associated with this publication are listed here as a vector

        :param occs: The occs of this Publication.
        :type occs: List[int]
        """

        self._occs = occs

