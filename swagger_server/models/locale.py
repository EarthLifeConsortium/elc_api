# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Locale(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lat: float=None, lon: float=None, geog_coords: str=None, locale_name: str=None, dataset_type: str=None, min_age: float=None, max_age: float=None, age_units: str=None, age_basis: str=None, locale_id: str=None):
        """
        Locale - a model defined in Swagger

        :param lat: The lat of this Locale.
        :type lat: float
        :param lon: The lon of this Locale.
        :type lon: float
        :param geog_coords: The geog_coords of this Locale.
        :type geog_coords: str
        :param locale_name: The locale_name of this Locale.
        :type locale_name: str
        :param dataset_type: The dataset_type of this Locale.
        :type dataset_type: str
        :param min_age: The min_age of this Locale.
        :type min_age: float
        :param max_age: The max_age of this Locale.
        :type max_age: float
        :param age_units: The age_units of this Locale.
        :type age_units: str
        :param age_basis: The age_basis of this Locale.
        :type age_basis: str
        :param locale_id: The locale_id of this Locale.
        :type locale_id: str
        """
        self.swagger_types = {
            'lat': float,
            'lon': float,
            'geog_coords': str,
            'locale_name': str,
            'dataset_type': str,
            'min_age': float,
            'max_age': float,
            'age_units': str,
            'age_basis': str,
            'locale_id': str
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon',
            'geog_coords': 'geog_coords',
            'locale_name': 'locale_name',
            'dataset_type': 'dataset_type',
            'min_age': 'min_age',
            'max_age': 'max_age',
            'age_units': 'age_units',
            'age_basis': 'age_basis',
            'locale_id': 'locale_id'
        }

        self._lat = lat
        self._lon = lon
        self._geog_coords = geog_coords
        self._locale_name = locale_name
        self._dataset_type = dataset_type
        self._min_age = min_age
        self._max_age = max_age
        self._age_units = age_units
        self._age_basis = age_basis
        self._locale_id = locale_id

    @classmethod
    def from_dict(cls, dikt) -> 'Locale':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The locale of this Locale.
        :rtype: Locale
        """
        return deserialize_model(dikt, cls)

    @property
    def lat(self) -> float:
        """
        Gets the lat of this Locale.
        Locale latitude

        :return: The lat of this Locale.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """
        Sets the lat of this Locale.
        Locale latitude

        :param lat: The lat of this Locale.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """
        Gets the lon of this Locale.
        Locale longitude

        :return: The lon of this Locale.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """
        Sets the lon of this Locale.
        Locale longitude

        :param lon: The lon of this Locale.
        :type lon: float
        """

        self._lon = lon

    @property
    def geog_coords(self) -> str:
        """
        Gets the geog_coords of this Locale.
        Geographic coordinate type as modern or paleo

        :return: The geog_coords of this Locale.
        :rtype: str
        """
        return self._geog_coords

    @geog_coords.setter
    def geog_coords(self, geog_coords: str):
        """
        Sets the geog_coords of this Locale.
        Geographic coordinate type as modern or paleo

        :param geog_coords: The geog_coords of this Locale.
        :type geog_coords: str
        """

        self._geog_coords = geog_coords

    @property
    def locale_name(self) -> str:
        """
        Gets the locale_name of this Locale.
        Dataset or collection name

        :return: The locale_name of this Locale.
        :rtype: str
        """
        return self._locale_name

    @locale_name.setter
    def locale_name(self, locale_name: str):
        """
        Sets the locale_name of this Locale.
        Dataset or collection name

        :param locale_name: The locale_name of this Locale.
        :type locale_name: str
        """

        self._locale_name = locale_name

    @property
    def dataset_type(self) -> str:
        """
        Gets the dataset_type of this Locale.
        Type of paleoecological or paleontological data

        :return: The dataset_type of this Locale.
        :rtype: str
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type: str):
        """
        Sets the dataset_type of this Locale.
        Type of paleoecological or paleontological data

        :param dataset_type: The dataset_type of this Locale.
        :type dataset_type: str
        """

        self._dataset_type = dataset_type

    @property
    def min_age(self) -> float:
        """
        Gets the min_age of this Locale.
        Youngest possible age of the locale

        :return: The min_age of this Locale.
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age: float):
        """
        Sets the min_age of this Locale.
        Youngest possible age of the locale

        :param min_age: The min_age of this Locale.
        :type min_age: float
        """

        self._min_age = min_age

    @property
    def max_age(self) -> float:
        """
        Gets the max_age of this Locale.

        :return: The max_age of this Locale.
        :rtype: float
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age: float):
        """
        Sets the max_age of this Locale.

        :param max_age: The max_age of this Locale.
        :type max_age: float
        """

        self._max_age = max_age

    @property
    def age_units(self) -> str:
        """
        Gets the age_units of this Locale.
        Time units (yr, ka or  ma)

        :return: The age_units of this Locale.
        :rtype: str
        """
        return self._age_units

    @age_units.setter
    def age_units(self, age_units: str):
        """
        Sets the age_units of this Locale.
        Time units (yr, ka or  ma)

        :param age_units: The age_units of this Locale.
        :type age_units: str
        """

        self._age_units = age_units

    @property
    def age_basis(self) -> str:
        """
        Gets the age_basis of this Locale.
        Scientific basis of age determination

        :return: The age_basis of this Locale.
        :rtype: str
        """
        return self._age_basis

    @age_basis.setter
    def age_basis(self, age_basis: str):
        """
        Sets the age_basis of this Locale.
        Scientific basis of age determination

        :param age_basis: The age_basis of this Locale.
        :type age_basis: str
        """

        self._age_basis = age_basis

    @property
    def locale_id(self) -> str:
        """
        Gets the locale_id of this Locale.
        DB specific index from dataset (neot) or coll (pbdb)

        :return: The locale_id of this Locale.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id: str):
        """
        Sets the locale_id of this Locale.
        DB specific index from dataset (neot) or coll (pbdb)

        :param locale_id: The locale_id of this Locale.
        :type locale_id: str
        """

        self._locale_id = locale_id

