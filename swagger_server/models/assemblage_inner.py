# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.assemblage_inner_table import AssemblageInnerTable
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class AssemblageInner(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sp_grid: List[str]=None, tm_grid: List[str]=None, var_unit: str=None, site_count: int=None, table: List[AssemblageInnerTable]=None):
        """
        AssemblageInner - a model defined in Swagger

        :param sp_grid: The sp_grid of this AssemblageInner.
        :type sp_grid: List[str]
        :param tm_grid: The tm_grid of this AssemblageInner.
        :type tm_grid: List[str]
        :param var_unit: The var_unit of this AssemblageInner.
        :type var_unit: str
        :param site_count: The site_count of this AssemblageInner.
        :type site_count: int
        :param table: The table of this AssemblageInner.
        :type table: List[AssemblageInnerTable]
        """
        self.swagger_types = {
            'sp_grid': List[str],
            'tm_grid': List[str],
            'var_unit': str,
            'site_count': int,
            'table': List[AssemblageInnerTable]
        }

        self.attribute_map = {
            'sp_grid': 'sp_grid',
            'tm_grid': 'tm_grid',
            'var_unit': 'var_unit',
            'site_count': 'site_count',
            'table': 'table'
        }

        self._sp_grid = sp_grid
        self._tm_grid = tm_grid
        self._var_unit = var_unit
        self._site_count = site_count
        self._table = table

    @classmethod
    def from_dict(cls, dikt) -> 'AssemblageInner':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The assemblage_inner of this AssemblageInner.
        :rtype: AssemblageInner
        """
        return deserialize_model(dikt, cls)

    @property
    def sp_grid(self) -> List[str]:
        """
        Gets the sp_grid of this AssemblageInner.
        netsi

        :return: The sp_grid of this AssemblageInner.
        :rtype: List[str]
        """
        return self._sp_grid

    @sp_grid.setter
    def sp_grid(self, sp_grid: List[str]):
        """
        Sets the sp_grid of this AssemblageInner.
        netsi

        :param sp_grid: The sp_grid of this AssemblageInner.
        :type sp_grid: List[str]
        """

        self._sp_grid = sp_grid

    @property
    def tm_grid(self) -> List[str]:
        """
        Gets the tm_grid of this AssemblageInner.
        netsi

        :return: The tm_grid of this AssemblageInner.
        :rtype: List[str]
        """
        return self._tm_grid

    @tm_grid.setter
    def tm_grid(self, tm_grid: List[str]):
        """
        Sets the tm_grid of this AssemblageInner.
        netsi

        :param tm_grid: The tm_grid of this AssemblageInner.
        :type tm_grid: List[str]
        """

        self._tm_grid = tm_grid

    @property
    def var_unit(self) -> str:
        """
        Gets the var_unit of this AssemblageInner.
        netsi

        :return: The var_unit of this AssemblageInner.
        :rtype: str
        """
        return self._var_unit

    @var_unit.setter
    def var_unit(self, var_unit: str):
        """
        Sets the var_unit of this AssemblageInner.
        netsi

        :param var_unit: The var_unit of this AssemblageInner.
        :type var_unit: str
        """

        self._var_unit = var_unit

    @property
    def site_count(self) -> int:
        """
        Gets the site_count of this AssemblageInner.
        netsi

        :return: The site_count of this AssemblageInner.
        :rtype: int
        """
        return self._site_count

    @site_count.setter
    def site_count(self, site_count: int):
        """
        Sets the site_count of this AssemblageInner.
        netsi

        :param site_count: The site_count of this AssemblageInner.
        :type site_count: int
        """

        self._site_count = site_count

    @property
    def table(self) -> List[AssemblageInnerTable]:
        """
        Gets the table of this AssemblageInner.

        :return: The table of this AssemblageInner.
        :rtype: List[AssemblageInnerTable]
        """
        return self._table

    @table.setter
    def table(self, table: List[AssemblageInnerTable]):
        """
        Sets the table of this AssemblageInner.

        :param table: The table of this AssemblageInner.
        :type table: List[AssemblageInnerTable]
        """

        self._table = table

