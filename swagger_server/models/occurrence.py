# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Occurrence(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, occ_id: str=None, taxon: str=None, taxon_id: str=None, max_age: float=None, min_age: float=None, age_units: str=None, lat: float=None, lon: float=None, geog_coords: str=None):
        """
        Occurrence - a model defined in Swagger

        :param occ_id: The occ_id of this Occurrence.
        :type occ_id: str
        :param taxon: The taxon of this Occurrence.
        :type taxon: str
        :param taxon_id: The taxon_id of this Occurrence.
        :type taxon_id: str
        :param max_age: The max_age of this Occurrence.
        :type max_age: float
        :param min_age: The min_age of this Occurrence.
        :type min_age: float
        :param age_units: The age_units of this Occurrence.
        :type age_units: str
        :param lat: The lat of this Occurrence.
        :type lat: float
        :param lon: The lon of this Occurrence.
        :type lon: float
        :param geog_coords: The geog_coords of this Occurrence.
        :type geog_coords: str
        """
        self.swagger_types = {
            'occ_id': str,
            'taxon': str,
            'taxon_id': str,
            'max_age': float,
            'min_age': float,
            'age_units': str,
            'lat': float,
            'lon': float,
            'geog_coords': str
        }

        self.attribute_map = {
            'occ_id': 'occ_id',
            'taxon': 'taxon',
            'taxon_id': 'taxon_id',
            'max_age': 'max_age',
            'min_age': 'min_age',
            'age_units': 'age_units',
            'lat': 'lat',
            'lon': 'lon',
            'geog_coords': 'geog_coords'
        }

        self._occ_id = occ_id
        self._taxon = taxon
        self._taxon_id = taxon_id
        self._max_age = max_age
        self._min_age = min_age
        self._age_units = age_units
        self._lat = lat
        self._lon = lon
        self._geog_coords = geog_coords

    @classmethod
    def from_dict(cls, dikt) -> 'Occurrence':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The occurrence of this Occurrence.
        :rtype: Occurrence
        """
        return deserialize_model(dikt, cls)

    @property
    def occ_id(self) -> str:
        """
        Gets the occ_id of this Occurrence.
        Unique occurrence ID

        :return: The occ_id of this Occurrence.
        :rtype: str
        """
        return self._occ_id

    @occ_id.setter
    def occ_id(self, occ_id: str):
        """
        Sets the occ_id of this Occurrence.
        Unique occurrence ID

        :param occ_id: The occ_id of this Occurrence.
        :type occ_id: str
        """

        self._occ_id = occ_id

    @property
    def taxon(self) -> str:
        """
        Gets the taxon of this Occurrence.
        Taxonomic name

        :return: The taxon of this Occurrence.
        :rtype: str
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon: str):
        """
        Sets the taxon of this Occurrence.
        Taxonomic name

        :param taxon: The taxon of this Occurrence.
        :type taxon: str
        """

        self._taxon = taxon

    @property
    def taxon_id(self) -> str:
        """
        Gets the taxon_id of this Occurrence.
        Unique taxonomic ID

        :return: The taxon_id of this Occurrence.
        :rtype: str
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id: str):
        """
        Sets the taxon_id of this Occurrence.
        Unique taxonomic ID

        :param taxon_id: The taxon_id of this Occurrence.
        :type taxon_id: str
        """

        self._taxon_id = taxon_id

    @property
    def max_age(self) -> float:
        """
        Gets the max_age of this Occurrence.
        Oldest age of the occurrence

        :return: The max_age of this Occurrence.
        :rtype: float
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age: float):
        """
        Sets the max_age of this Occurrence.
        Oldest age of the occurrence

        :param max_age: The max_age of this Occurrence.
        :type max_age: float
        """

        self._max_age = max_age

    @property
    def min_age(self) -> float:
        """
        Gets the min_age of this Occurrence.
        Youngest age of the occurrence

        :return: The min_age of this Occurrence.
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age: float):
        """
        Sets the min_age of this Occurrence.
        Youngest age of the occurrence

        :param min_age: The min_age of this Occurrence.
        :type min_age: float
        """

        self._min_age = min_age

    @property
    def age_units(self) -> str:
        """
        Gets the age_units of this Occurrence.
        Units of min and max age as yr, ka or ma

        :return: The age_units of this Occurrence.
        :rtype: str
        """
        return self._age_units

    @age_units.setter
    def age_units(self, age_units: str):
        """
        Sets the age_units of this Occurrence.
        Units of min and max age as yr, ka or ma

        :param age_units: The age_units of this Occurrence.
        :type age_units: str
        """

        self._age_units = age_units

    @property
    def lat(self) -> float:
        """
        Gets the lat of this Occurrence.
        Occurrence latitude in decimal degrees

        :return: The lat of this Occurrence.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """
        Sets the lat of this Occurrence.
        Occurrence latitude in decimal degrees

        :param lat: The lat of this Occurrence.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """
        Gets the lon of this Occurrence.
        Occurrence longitude in decimal degrees

        :return: The lon of this Occurrence.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """
        Sets the lon of this Occurrence.
        Occurrence longitude in decimal degrees

        :param lon: The lon of this Occurrence.
        :type lon: float
        """

        self._lon = lon

    @property
    def geog_coords(self) -> str:
        """
        Gets the geog_coords of this Occurrence.
        Geographic coordinate type as modern or paleo

        :return: The geog_coords of this Occurrence.
        :rtype: str
        """
        return self._geog_coords

    @geog_coords.setter
    def geog_coords(self, geog_coords: str):
        """
        Sets the geog_coords of this Occurrence.
        Geographic coordinate type as modern or paleo

        :param geog_coords: The geog_coords of this Occurrence.
        :type geog_coords: str
        """

        self._geog_coords = geog_coords

